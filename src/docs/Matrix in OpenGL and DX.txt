http://www.opengpu.org/forum.php?mod=viewthread&tid=10405

列矩阵（column major）和行矩阵（row major）是数学上的概念，和电脑无关。它只是一套约定（convention），按照矢量和矩阵的乘法运算时，矢量是列矢还是行矢命名。

这里只说4x4矩阵。齐次矢量可以看成是一个1x4的矩阵，就是行矢；或者4x1的矩阵，就是列矢。

列矩阵变换矢量时，用矩阵乘以列矢量（M * v），如下。其中1、2、3为三个轴向矢量。
| x1 x2 x3 xt |   | x |
| y1 y2 y3 yt | * | y |
| z1 y2 y3 zt |   | z |
| 0  0  0  1  |   | w |

列矩阵之间乘法组合时，组合顺序为从右到左。例如依次做放缩S、旋转R、平移T，则组合为T * R * S。

行矩阵变换矢量时，用行矢量乘以矩阵（v * M），如下。其中1、2、3为三个轴向矢量。
              | x1 y1 z1 0 |
| x y z w | * | x2 y2 z2 0 |
              | x3 y3 z3 0 |
              | xt yt zt 1 |

行矩阵之间乘法组合时，组合顺序为从左到右。例如依次做放缩S、旋转R、平移T，则组合为S * R * T。

列优先存储（column major storage）和行优先存储（row major storage）是计算机上的概念，指多维数组的元素在内存中的排列顺序。
对应到矩阵上，按内存地址顺序编号，则列优先存储的顺序为
| 1  5  9  13 |
| 2  6  10 14 |
| 3  7  11 15 |
| 4  8  12 16 |
行优先存储的顺序为
| 1  2  3  4  |
| 5  6  7  8  |
| 9  10 11 12 |
| 13 14 15 16 |

对于效率差异，其实并没有绝对区别，和处理器的指令设计有关，也和矩阵的主要使用方式有关。
在CPU上，一般是列矩阵用列优先存储，行矩阵用行优先存储，也就是矩阵major和存储major一致。一来比较简单清楚不容易犯错，二来可以直接在矩阵中访问三个轴矢量，三来在SSE优化时略有优势，可以使用4个mul-add指令完成矩阵乘矢量。但最新的SSE指令集也加入了dot指令，所以胜负难料。而在GPU上，由于矩阵是以矢量序列方式存储的，为了优化乘法速度，会颠倒存储顺序。不明白可以想想矩阵和矢量的乘法，可以拆解成4个矢量间点乘，点乘的操作数都在float4的矢量里就不用shuffle了。

决定选择哪种模式，更多的是历史原因。比如Maya、OpenInventor等虽然用的OpenGL，但使用的是行矩阵。OpenGL按着多数教科书习惯，用的列矩阵。而DirectX，沿袭了RenderMan等的习惯，用的行矩阵。

除此之外，也确实有个别采用了列矩阵但是行优先存储的……原因嘛，C的数组是行优先，在代码里写矩阵常量当然是行优先比较直观。大家可以找找那些图形库、图形引擎用了不一致的模式。

列矩阵列优先存储的内存数据，其实和行矩阵行优先存储的内存数据是一样的，都是
[ x1 y1 z1 0 x2 y2 z2 0 x3 y3 z3 0 xt yt zt 1 ]
这也是Maya、OpenInventor用行矩阵而不需要担心效率的原因，不需要转置，可以直接传给OpenGL。

另外，澄清一个经常混淆的概念：左乘(left multiplication, pre-multication)和右乘(right multiplication, post-multication)

这里的左右、pre/post，指的是矢量和矩阵相乘时，矢量的位置。对标量和矩阵相乘时，指标量的位置。

混淆的原因，是有个别组织、个人用其指代矩阵在乘法中的位置，导致正好相反的命名。比如Maya里的pre-multiplication和post-multiplication。